// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JalurMasuk {
  SNBP
  SNBT
  PPKB
  SimakUI
  SimakKKI
  TalentScouting
  Prestasi
}
enum Jurusan {
  IlmuKomputer
  SistemInformasi
  KKI
}
enum Gender{
  Male
  Female
}
enum Role{
  User
  Admin
  Mentor
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  fillDetails   Boolean  @default(false)
  gender        Gender?
  image         String?
  NPM           String?
  idLine        String?
  idDiscord     String?
  buktiMasuk    String?
  buktiShare    String?
  jalurMasuk    JalurMasuk?
  jurusan       Jurusan?
  asalSekolah   String?
  role          Role     @default(User)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts Account[]
  sessions Session[]
  kelompokUsers KelompokUser[]
  submissions   Submisi[]

  @@map("user")
}

model ALLOWED_EMAIL{
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("allowed_email")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  accountId         String // BetterAuth expects this field
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  scope             String? // Added scope field for BetterAuth
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

enum TipeTugas {
  LAB
  TP
  MINIQUIZ
}

model Kelompok {
  id        String     @id @default(cuid())
  name      String
  users     KelompokUser[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model KelompokUser {
  id         String   @id @default(cuid())
  userId     String
  kelompokId String
  isMentor   Boolean  @default(false)

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  kelompok   Kelompok @relation(fields: [kelompokId], references: [id], onDelete: Cascade)

  @@unique([userId, kelompokId])
}

model Tugas {
  id          String     @id @default(cuid())
  title       String
  description String
  tipe        TipeTugas
  linkTugas   String
  deadline    DateTime
  submissions Submisi[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Submisi {
  id        String   @id @default(cuid())
  userId    String
  tugasId   String
  link      String
  nilai     Int?     // Nilai opsional
  feedback  String? 

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tugas     Tugas    @relation(fields: [tugasId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tugasId])
}

model notification{
  id        String   @id @default(cuid())
  title     String
  content   String
  link      String?
}